html
  head
    script(src='/static/scripts/util.js')
    //- script(src='/static/scripts/mockups/reload.js' async) 
    link(rel='stylesheet' href='/static/css/mockups/base-style.css')
    link(rel='stylesheet' href='/static/css/mockups/mini-pids.css')
  body
    -
      let firstDeparture = departures[0]
      function getStoppingPattern(additionalInfo) {
        let { screenStops } = additionalInfo

        let stoppingPattern = ''
        let blocks = []
        let currentBlock = []
        let blockIsExpress = 'stops'
        screenStops.forEach(stop => {
          if (!(blockIsExpress || stop.isExpress) ||
              blockIsExpress && stop.isExpress)
            currentBlock.push(stop.stopName)
          else {
            blocks.push({stops: currentBlock, isExpress: blockIsExpress})
            currentBlock = [stop.stopName]
            blockIsExpress = stop.isExpress
          }
        })
        blocks.push({stops: currentBlock, isExpress: blockIsExpress})
        if (additionalInfo.expressCount == 1)
          return 'Not Stopping At ' + blocks[1][0]
        if (additionalInfo.expressCount == 0)
          return 'Stops All Stations'

        blocks = blocks.filter(block => block.stops.length)
        let previousExpress = false;

        blocks.forEach((block, i) => {
          if (i > 0 && i < blocks.length - 1 && !block.isExpress && blocks[i - 1].isExpress && blocks[i + 1].isExpress) {
            previousExpress = true
            return
          } else if (i > 0 && i < blocks.length - 1 && block.isExpress && !blocks[i - 1].isExpress && !blocks[i + 1].isExpress) {
            if (block.stops.length == 1) {
              stoppingPattern += ', '
              if (!previousExpress)
                stoppingPattern += 'then runs express from '
              stoppingPattern += blocks[i - 1].stops.slice(-1)[0] + ' to ' + blocks[i + 1].stops[0]
           } else {
             if (!previousExpress) {
               stoppingPattern += ', then runs express from '
               stoppingPattern += blocks[i - 1].stops.slice(-1)[0] + ' to ' + blocks[i + 1].stops[0]
             }
           }
           return
          }

          previousExpress = false

          if (i > 0)
            stoppingPattern += ', then '

          if (block.isExpress)
            stoppingPattern += 'runs express'
          else if (block.stops.length > 1)
            stoppingPattern += 'stops all stations'

          if (i == 0) {
            stoppingPattern += ' to ' + block.stops.slice(-1)[0]
          } else if (i < blocks.length - 1) {
            stoppingPattern += ', ' + blocks[i - 2].stops.slice(-1)[0] + ' to ' + block.stops.slice(-1)[0]
          } else {
            stoppingPattern += ' to ' + block.stops.slice(-1)[0]
          }

          //stops all stations to x, then runs express to Y, then stops all stations to Z
        })

        return stoppingPattern.slice(0, 1).toUpperCase() + stoppingPattern.slice(1)
      }
      
      
      function getStoppingType(additionalInfo) {
        if (additionalInfo.expressCount === 0)
          return 'Stops All'
        else if (additionalInfo.expressCount <= 2)
          return 'Ltd Express'
        else return 'Express'
      }
      
      function formatTime(time) {
        let hours = time.getHours()
        let minutes = time.getMinutes()
        let mainTime = ''

        mainTime += (hours % 12) || 12
        mainTime += ':'
        if (minutes < 10) mainTime += '0'
        mainTime += minutes

        return mainTime
      }
    div.content
      div.topRow
        //- Flinders Street   Scheduled 9:40 Departing 1min
        -
          if (firstDeparture.trip.destination === 'Parliament') firstDeparture.trip.destination = 'City Loop'
          let style = ''
          if (firstDeparture.trip.destination.length > 12)
            style = 'transform: translateX(-5%) scaleX(0.9)'
        p(style=style).firstDestination=firstDeparture.trip.destination
        div.firstDepartureInfo
          div.scheduled
            p Scheduled
            p=firstDeparture.scheduledDepartureTime.format('h:mm').toLowerCase()
          div.actual
            p Departing
            div
              if firstDeparture.minutesToDeparture > 0
                span=firstDeparture.minutesToDeparture
                span min
              else
                span Now
      div.middleRow
        - let stoppingPattern = getStoppingPattern(firstDeparture.additionalInfo)
        p=stoppingPattern
      div.whiteLine
      div.bottomRow
        -
          let secondDeparture = departures[1]
        if secondDeparture
          span=secondDeparture.scheduledDepartureTime.format('h:mm').toLowerCase()
          span=secondDeparture.trip.destination
          span=getStoppingType(secondDeparture.additionalInfo)
          div
            span=secondDeparture.minutesToDeparture
            span min
        else
          span --
          span --
          span --
          div
            span --
            span
          
        div.timeNow
          span=formatTime(new Date())
            
