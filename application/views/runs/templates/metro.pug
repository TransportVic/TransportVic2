mixin infoTextRow(text)
  div.tripInfoRow
    span #{text}

mixin stopRow(stop)
  div.timingRow(id='stop-' + stop.stopGTFSID)
    a.departureInfo(href=`/metro/timings/${stop.stopName.toLowerCase().replace(/ /g, '-').slice(0, -16)}`)
      span.stopName=stop.stopName.slice(0, -16)
      if trip.cancelled || stop.cancelled
        span.info.cancelled CANCELLED
      else if stop.platform
        span.platform=`Platform ${stop.platform}`
    div(class=`timing ${stop.headwayDevianceClass}`)
      span=stop.pretyTimeToDeparture
      span=stop.departureTime || stop.arrivalTime

if trip.runID
  div.infoRow
    if trip.isRailReplacementBus && trip.block && trip.block.match(/^[A-Z]{2,3}\d{3,}/)
      span Run #{trip.runID} (Shift #{trip.block})
    else
      span Run #{trip.runID}
    if trip.vehicle
      - let { size, type } = trip.vehicle
        div.vehicle
          span #{size}x 
          img(src=`/static/images/icons/${type.toLowerCase()}.svg`)
  if trip.vehicle && trip.vehicle.consist.length
    div.liveConsist
      span.header Live Tracking
      span.consist #{trip.vehicle.consist.join('-')}

if trip.isRailReplacementBus
  div.departure.noTiming
    -
      let cssClass = `${cleanRouteName}-line`
      if (trip.routeName === 'City Circle') cssClass = 'city-circle' // Unlikely to happen but just in case
    a(class=`leftContainer ${cssClass}`)
      span.topText Rail Bus
      if trip.headsign
        span.bigNumber #{trip.headsign}
      else
        img(src=`${staticBase}/static/images/clear-icons/bus.svg`)
    a.departureInfo
      span.towards #{trip.routeName} Towards
      span.destination #{trip.destination.slice(0, -16)}
      span.broadDepartureInfo.important Rail Replacement Bus
  div.infoRow
    span Replacement Bus Stop
div.timing-list
  if trip.formedByTrip
    if trip.formedByTrip.origin !== trip.formedByTrip.stopTimings[0].stopName
      +infoTextRow(`Originates from ${trip.formedByTrip.origin.slice(0, -16)}`)
    for stop in trip.formedByTrip.stopTimings
      +stopRow(stop)
    +infoTextRow(`Dwells at ${trip.stopTimings[0].stopName.slice(0, -16)} for ${Math.max(0, trip.stopTimings[0].departureTimeMinutes - trip.formedByTrip.stopTimings[trip.formedByTrip.stopTimings.length - 1].arrivalTimeMinutes)} min`)

  -
    let lastNonAMEX = trip.stopTimings.findLastIndex(stop => !stop.cancelled)
    let firstNonAMEX = trip.stopTimings.findIndex(stop => !stop.cancelled)

    let tripEarlyTermination = lastNonAMEX >= 0 && lastNonAMEX !== trip.stopTimings.length - 1 && trip.stopTimings.every((stop, i) => i <= lastNonAMEX || stop.cancelled)
    let tripLateStart = firstNonAMEX >= 0 && firstNonAMEX !== 0 && trip.stopTimings.every((stop, i) => i >= firstNonAMEX || stop.cancelled)

  if tripLateStart || tripEarlyTermination
    if tripLateStart
      for stop in trip.stopTimings.slice(0, firstNonAMEX)
        +stopRow(stop)
      +infoTextRow(`Prior stops from ${trip.destination.slice(0, -16)} cancelled`)

    for stop in trip.stopTimings.slice(firstNonAMEX, lastNonAMEX + 1)
      +stopRow(stop)

    if tripEarlyTermination
      if trip.formingTrip
        +infoTextRow(`Diverted to ${trip.formingTrip.destination.slice(0, -16)}`)
        for stop in trip.formingTrip.stopTimings
          +stopRow(stop)
      +infoTextRow(`Remaining stops to ${trip.destination.slice(0, -16)} cancelled`)
      for stop in trip.stopTimings.slice(lastNonAMEX + 1)
        +stopRow(stop)

  else
    for stop in trip.stopTimings
      +stopRow(stop)
    if trip.formingTrip
      +infoTextRow(`Dwells at ${trip.formingTrip.stopTimings[0].stopName.slice(0, -16)} for ${Math.max(0, trip.formingTrip.stopTimings[0].departureTimeMinutes - trip.stopTimings[trip.stopTimings.length - 1].arrivalTimeMinutes)} min`)
      for stop in trip.formingTrip.stopTimings
        +stopRow(stop)
      if trip.formingTrip.destination !== trip.formingTrip.stopTimings[trip.formingTrip.stopTimings.length - 1].stopName
        +infoTextRow(`Then continues on to ${trip.formingTrip.destination.slice(0, -16)}`)
