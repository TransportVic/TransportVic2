extends ../layout

block head
  title=`TransportVic - ${stop.stopName}`
  
  meta(property='og:title' content=`TransportVic - ${stop.stopName}`)
  meta(property='twitter:title' content=`TransportVic - ${stop.stopName}`)
  meta(property='og:description' content=`Viewing the Next 4 ${currentMode} departures from ${stop.stopName}`)
  meta(property='twitter:description' content=`Viewing the Next 4 ${currentMode} departures from ${stop.stopName}`)
    
  link(rel='preload' as='image' href='/static/images/clear-icons/bus.svg')
  link(rel='preload' as='image' href='/static/images/clear-icons/coach.svg')
  link(rel='preload' as='image' href='/static/images/clear-icons/tram.svg')
  link(rel='preload' as='image' href='/static/images/clear-icons/metro.svg')
  link(rel='preload' as='image' href='/static/images/clear-icons/vline.svg')

block title
  span=stop.stopName
  
block header-right
  img#bookmark(src='/static/images/decals/bookmark.svg' alt='bookmark icon')

block scripts
  script(src='/static/scripts/timings.js' async)
  
append style
  link(rel='stylesheet' href='/static/css/combined-colours.css')
  link(rel='stylesheet' href='/static/css/timings/base-style.css')

append content
  -
    let stopModes = stop.bays.map(e => e.mode).filter((e, i, a) => a.indexOf(e) === i)
    let iconMap = {
      'regional train': 'vline',
      'metro train': 'metro',
      'regional coach': 'coach'
    }
  if stopModes.length > 1
    div#modeSwitch
      for mode in stopModes
        -
          let url = `/${iconMap[mode] || mode.replace(' ', '-')}/timings/`
          if (mode === 'bus' || mode === 'tram') 
            url += `${stop.codedSuburb[0]}/`
          url += stop.codedName
          if (mode.includes('train'))
            url = url.slice(0, -16)
        a(href=url class=`modeSwitchType ${mode.replace(' ', '-')} ${mode === currentMode ? '' : 'inactive'}`)
          img(src=`/static/images/clear-icons/${iconMap[mode] || mode}.svg` alt='')
          span=mode
  div#departures
    for service in services
      -
        let serviceDepartures = groupedDepartures[service]
        let destinations = Object.keys(serviceDepartures).sort((a, b) => a.length - b.length)
        let hasNumber = !!service
      for destination in destinations.sort((a, b) => serviceDepartures[a][0].actualDepartureTime - serviceDepartures[b][0].actualDepartureTime)
        -
          let destinationDepartures = serviceDepartures[destination]
          let departures = destinationDepartures.slice(0, 4)
          let firstDeparture = destinationDepartures[0]
        div(class=`departure${hasNumber ? '' : ' no-number'}`)
          if hasNumber
            a(class=`leftContainer platform ${classGen(firstDeparture)}`)
              if firstDeparture.loopDirection
                span.topText=firstDeparture.loopDirection
              else if firstDeparture.routeDetails
                span.topText=firstDeparture.routeDetails
              span.bigNumber=firstDeparture.routeNumber
              if firstDeparture.bay
                span.bottomText=firstDeparture.bay
          a(href=firstDeparture.destinationURL).departureInfo
            if !hasNumber
              span.routeName=firstDeparture.trip.routeName
            span.towards Towards
            span.destination(style=`width: calc(100vw - (3.2vw + 3.2vh) * ${departures.length}${hasNumber ? ' - (5.25vw + 5.25vh)' : ''} - (1vw + 1vh) - 1.5vw)`)=firstDeparture.destination
            if firstDeparture.guidanceText
              span.info.smaller=firstDeparture.guidanceText
            if firstDeparture.viaText && hasNumber
              span.info.smaller(style=`width: calc(100vw - (3.2vw + 3.2vh) * ${departures.length}${hasNumber ? ' - (5.25vw + 5.25vh)' : ''} - (1vw + 1vh) - 1.5vw)`)=firstDeparture.viaText
          div.timings
            for i in Array(4 - departures.length)
              a.timing.mini(style='display: none')
            for departure in departures
              a(href=departure.tripURL class=`timing mini ${departure.headwayDevianceClass}`)
                div.stats
                  if departure.vehicleDescriptor.operator === 'Yarra Trams'
                    if departure.tram.data.ac
                      img(src='/static/images/decals/ac.svg')
                    if departure.tram.data.lf
                      img(src='/static/images/decals/wheelchair.svg')
                span=departure.prettyTimeToArrival
                span=departure.scheduledDepartureTime.format('HH:mm')
                if departure.vehicleDescriptor
                  if departure.vehicleDescriptor.supplier === 'Smartrak' || departure.isBusMinderOverride
                    if departure.busRego
                      span.rego=`#${departure.busRego}`
                    else
                      span.rego=`${departure.vehicleDescriptor.id}`
                  else if departure.vehicleDescriptor.operator === 'Yarra Trams'
                    span.rego=`${departure.tram.model}.${departure.tram.id}`
