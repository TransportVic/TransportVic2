- 
  let cityLoopStationAbbreviations = {
    'FSS': 'Flinders Street Railway Station',
    'SSS': 'Southern Cross Railway Station',
    'FGS': 'Flagstaff Railway Station',
    'MCE': 'Melbourne Central Railway Station',
    'PAR': 'Parliament Railway Station'
  }
  let cityLoopStationNames = Object.values(cityLoopStationAbbreviations).concat('City Loop Railway Station')
  
if departures.length
  for departure in departures
    div.departure
      -
        let stopName = station.stopName
        let indexOfCurrentStation = departure.trip.stopTimings.map(stop => stop.stopName).indexOf(stopName)
        let stopsAt = departure.trip.stopTimings.filter((_, i) => i > indexOfCurrentStation).map(stop => stop.stopName)
        let cityLoopStationFullNames = departure.cityLoopConfig.map(stn => cityLoopStationAbbreviations[stn])
        
        let routeName = departure.trip.routeName
        if (!departure.isRailReplacementBus) {
          stopsAt = stopsAt.filter(station => !cityLoopStationNames.includes(station))
          
          if (departure.trip.direction === 'Up')
            stopsAt = stopsAt.concat(cityLoopStationFullNames)
          else if (cityLoopStationNames.includes(station.stopName)) {
            indexOfCurrentStation = cityLoopStationFullNames.indexOf(stopName)
            stopsAt = cityLoopStationFullNames.filter((stn, i) => i > indexOfCurrentStation).concat(stopsAt)
          }

          stopsAt = stopsAt.filter(Boolean).filter((e,i,a) => a.indexOf(e) === i)
        }
        
      input(type='hidden' name='stops-at' value=stopsAt.join(','))
      input(type='hidden' name='platform' value=departure.platform || '')
      input(type='hidden' name='run' value=departure.runID)
      input(type='hidden' name='line' value=routeName)
      if departure.cancelled
        input(type='hidden' name='cancelled')
      -
        let cssClass = `${departure.codedLineName}-line`
        if (routeName === 'City Circle') cssClass = 'city-circle'
      a(class=`leftContainer ${cssClass}`)
        if departure.isRailReplacementBus
          span.topText Rail Bus
          img(src='/static/images/clear-icons/bus.svg')
        else
          span.topText Platform
          span.bigNumber #{departure.platform || '?'}
      a(href=departure.destinationURL).departureInfo
        -
          let prettyLineName = `${routeName} Line`
          if (routeName === 'City Circle') prettyLineName = routeName
        span.towards #{prettyLineName} towards
        span.destination #{departure.destination}
        
        - let currentSuspension = departure.suspensions.find(suspension => suspension.disruptionStatus !== 'passed')
        if currentSuspension
          span.broadDepartureInfo.important Buses replace trains from #{currentSuspension.startStation.slice(0, -16)} to #{currentSuspension.endStation.slice(0, -16)}
        else if departure.cancelled
          span.broadDepartureInfo.important CANCELLED
        else if departure.isRailReplacementBus
          span.broadDepartureInfo.important.clampLine.clamp2 Rail Replacement Bus - Stops #{stopsAt.map(s => s.slice(0, -16)).join(', ')}
        else
          
          -
            let {trip} = departure
            let isUpTrip = (trip || {}).direction === 'Up' || trip.runID % 2 === 0
            
            let cityLoopConfig = departure.cityLoopConfig.join(', ')
            let altLoopConfig = departure.altLoopConfig.join(', ')
            
            let configText = []
            let important = false
            
            if (altLoopConfig.length) {
              let shouldShow = (isUpTrip && stopsAt.includes('Newport Railway Station'))
                || (!isUpTrip && stopsAt.includes('Laverton Railway Station'))
                
              if (shouldShow) {
                if (departure.willSkipALT) important = true
                configText.push(altLoopConfig)
              }
            }
            
            if (cityLoopStationNames.includes(station.stopName) || isUpTrip) {
              if (departure.willSkipCCL) important = true
              configText.push(cityLoopConfig)
            }
            
            if (!isUpTrip && configText.length === 2) configText.reverse()
          
          if configText.length
            if important
              span.broadDepartureInfo.important #{configText.join(' -> ')}
            else
              
              span.broadDepartureInfo #{configText.join(' -> ')}
        if departure.consist.length && false
          span.broadDepartureInfo Vehicle: #{departure.consist.join('-')}
      div.timings
        a(class='timing ' + departure.headwayDevianceClass href=`/metro/run/${departure.tripURL}`)
          span #{departure.pretyTimeToDeparture}
          span #{departure.scheduledDepartureTime.format('HH:mm')}
else
  div.errorPage
    h2 No Upcoming Departures...
