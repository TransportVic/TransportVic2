- let cityStations = ['Flinders Street', 'Southern Cross', 'Parliament', 'Flagstaff', 'Melbourne Central']

if departures.length
  for departure in departures
    div.departure
      -
        let { routeName } = departure
        if (departure.formingTrip) routeName = departure.formingTrip.routeName
        let futureStops = departure.futureFormingStops || departure.futureStops
      input(type='hidden' name='stops-at' value=futureStops.join(','))
      input(type='hidden' name='platform' value=departure.platform || '')
      input(type='hidden' name='run' value=departure.runID)
      input(type='hidden' name='line' value=routeName)
      if departure.cancelled
        input(type='hidden' name='cancelled')
      -
        let cssClass = `${departure.cleanRouteName}-line`
        if (routeName === 'City Circle') cssClass = 'city-circle'
      a(class=`leftContainer ${cssClass}`)
        if departure.isRailReplacementBus
          span.topText Rail Bus
          if departure.trip.headsign
            span.bigNumber #{departure.trip.headsign}
          else
            img(src=`${staticBase}/static/images/clear-icons/bus.svg`)
        else
          span.topText Platform
          span.bigNumber #{departure.platform || '?'}
      a(href=departure.destinationURL).departureInfo
        -
          let prettyLineName = `${routeName} Line`
          if (routeName === 'City Circle') prettyLineName = routeName
        span.towards #{prettyLineName} towards
        span.destination #{departure.formingDestination || departure.destination}
        
        - let currentSuspension = departure.suspension
        if currentSuspension && currentSuspension.disruptionStatus !== 'passed' && !departure.cancelled
          span.broadDepartureInfo.important Buses replace trains from #{currentSuspension.startStation.slice(0, -16)} to #{currentSuspension.endStation.slice(0, -16)}
        else if departure.cancelled
          span.broadDepartureInfo.important CANCELLED
        else if departure.isRailReplacementBus
          span.broadDepartureInfo.important.clampLine.clamp2 Rail Replacement Bus - Stops #{futureStops.join(', ')}
        else
          
          -
            let configText = []
            let important = false

            if (!departure.isRailReplacementBus) {
              let isUpTrip = departure.direction === 'Up'
              let { futureStops } = departure
              
              let cityLoopRunning = departure.cityLoopRunning ? departure.cityLoopRunning.join(', ') : ''
              let altonaLoopRunning = departure.altonaLoopRunning ? departure.altonaLoopRunning.join(', ') : ''
              
              if (altonaLoopRunning.length) {
                let shouldShow = (isUpTrip && futureStops.includes('Newport')) || (!isUpTrip && futureStops.includes('Laverton'))
                
                if (shouldShow) {
                  if (departure.isSkippingLoop) important = true
                  configText.push(altonaLoopRunning)
                }
              }
              
              if (cityLoopRunning.length) {
                let shouldShow = isUpTrip || cityStations.includes(station.stopName.slice(0, -16))
                
                if (shouldShow) {
                  if (departure.isSkippingLoop) important = true
                  configText.push(cityLoopRunning)
                }
              }

              if (!isUpTrip && configText.length === 2) configText.reverse()
            }

          if configText.length
            if important
              span.broadDepartureInfo.important #{configText.join(' -> ')}
            else
              
              span.broadDepartureInfo #{configText.join(' -> ')}
      div.timings
        a(class='timing ' + departure.headwayDevianceClass href=`/metro/run/${departure.tripURL}`)
          span #{departure.pretyTimeToDeparture}
          span #{departure.scheduledDepartureTime.format('HH:mm')}
else
  div.errorPage
    h2 No Upcoming Departures...
