if departures.length
  for departure in departures
    div.departure
      -
        let indexOfCurrentStation = departure.trip.stopTimings.map(stop => stop.stopName).indexOf(station.stopName)
        let stopsAt = departure.trip.stopTimings.filter((_, i) => i > indexOfCurrentStation).map(stop => stop.stopName)
      input(type='hidden' name='stops-at' value=stopsAt.join(','))
      input(type='hidden' name='platform' value=departure.platform || '')
      input(type='hidden' name='run' value=departure.runID)
      input(type='hidden' name='line' value=departure.shortRouteName)
      a.leftContainer.vline
        if departure.isRailReplacementBus
          span.topText Coach Svc
          img(src='/static/images/clear-icons/bus.svg')
        else
          span.topText Platform
          -
            let platform = departure.platform
            if (!(departure.trip.routeGTFSID === '14-XPT' && departure.trip.updateTime)) {
              if (station.stopName !== 'Southern Cross Railway Station' && platform !== '??') platform += '?'
              if (departure.cancelled) platform = '-'
            }
          span.bigNumber #{platform}
      -
        let departureClass = 'departureInfo'
        if (departure.flags && departure.flags.reservationsOnly)
          departureClass += ' reservationsOnly'
      a(class=departureClass href=`/vline/timings/${departure.destination.toLowerCase().replace(/ /g, '-')}`)
        -
          let lineName = `${departure.shortRouteName} Line towards`
          if (departure.trip.routeGTFSID === '14-XPT') lineName = 'Melbourne-Sydney XPT towards'
        span.towards #{lineName}
        span.destination #{departure.destination}
        -
          let showPatternAltered = false
          if (departure.trip.type === 'pattern-altered') {
            let stopSkipped = departure.trip.stopTimings.find(stop => stop.cancelled)
            let currentStop = departure.trip.stopTimings.find(stop => stop.stopName === station.stopName)
            let skippedIndex = departure.trip.stopTimings.indexOf(stopSkipped)
            let currentIndex = departure.trip.stopTimings.indexOf(currentStop)
            showPatternAltered = skippedIndex >= currentIndex
          }

        if departure.isRailReplacementBus
          span.broadDepartureInfo.important This service has been replaced by coaches
        else if departure.trip.type === 'change'
          if departure.cancelled
            - let firstMod = departure.trip.modifications[0]
            
            if departure.trip.modifications.length === 1
              span.broadDepartureInfo.important CANCELLED: Now #{firstMod.type}s #{firstMod.type === 'originate' ? 'from' : 'at'} #{firstMod.changePoint}
            else
              span.broadDepartureInfo.important CANCELLED: Now #{departure.trip.modifications.map(m => `${m.type}s ${m.type === 'originate' ? 'from' : 'at'} ${m.changePoint}`).join(' & ')}
          else if departure.trip.modifications.some(m => m.type === 'terminate')
            - let terminationModification = departure.trip.modifications.find(m => m.type === 'terminate')
            span.broadDepartureInfo.important CHANGED: Now terminates at #{terminationModification.changePoint}
        else if showPatternAltered
          span.broadDepartureInfo.important #{skippedIndex === currentIndex ? 'CANCELLED' : 'CHANGED'}: Will not stop at #{stopSkipped.stopName.slice(0, -16)}
        else if departure.cancelled
          span.broadDepartureInfo.important CANCELLED
        else
          
          -
            let flags = ''
            let checkFlags = departure.flags || {}
            if (checkFlags.firstClassAvailable)
              flags = 'First Class'
            if (checkFlags.barAvailable) {
              if (flags.length) flags += ' & '
              flags += 'Bar'
            }
            if (flags.length) flags += ' Available'
            if (checkFlags.reservationsOnly) {
              if (flags.length) flags += ' - '
              flags += 'Reservations Only'
            }
          
            let vehicleData
            let important = false
            if (departure.vehicle) {
              vehicleData = 'Vehicle: ' + departure.vehicle
            }
            if (departure.divideMessage) vehicleData += ` ${departure.divideMessage}`
            
            if (departure.trip.type === 'capacity reduction') {
              important = true
              vehicleData = `Reduced capacity of ${departure.trip.capacity} carriages`
            }
          span.broadDepartureInfo=flags
          if vehicleData
            if important
              span.broadDepartureInfo.important #{vehicleData}
            else
              span.broadDepartureInfo #{vehicleData}
          
      div.timings
        a(class=`timing ${departure.headwayDevianceClass}` href=departure.tripURL)
          span #{departure.pretyTimeToDeparture}
          span #{departure.scheduledDepartureTime.format('HH:mm')}
else
  div.errorPage
    h2 No Upcoming Departures...
